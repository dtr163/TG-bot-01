#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram-–±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∂–∞–ª–æ–± –Ω–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
–ê–≤—Ç–æ—Ä: Manus AI
–í–µ—Ä—Å–∏—è: 2.1 - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫
"""

import asyncio
import logging
import re
import os
import json
from datetime import datetime
from typing import Dict, Any, Optional, List
from dataclasses import dataclass, asdict, field

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton,
    InputMediaPhoto, InputMediaDocument, InputMediaVideo,
    Contact
)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
from text_processor import TextProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = "7557858368:AAGTBY7345zhffvucjj0RImZo11joyYrg8M"
CHANNEL_ID = -1002847094335  # ID –∫–∞–Ω–∞–ª–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: int, —Å -100)
ADMIN_ID = 864497192  # Telegram ID –∞–¥–º–∏–Ω–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: int)
ADMIN_USERNAME = "tdr_763"  # Username –∞–¥–º–∏–Ω–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏ "–í–æ–∑—Ä–∞–∑–∏—Ç—å"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
text_processor = TextProcessor()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ComplaintStates(StatesGroup):
    waiting_for_photo = State()
    waiting_for_name = State()
    waiting_for_position = State()
    waiting_for_contact = State()
    waiting_for_date = State()
    waiting_for_location = State()
    waiting_for_description = State()
    waiting_for_violation_category = State()
    waiting_for_positive_aspects = State()
    waiting_for_fired_status = State()
    waiting_for_rating = State()
    waiting_for_files = State()
    waiting_for_confirmation = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
class AdminEditStates(StatesGroup):
    editing_name = State()
    editing_position = State()
    editing_contact = State()
    editing_date = State()
    editing_location = State()
    editing_description = State()
    editing_rating = State()

# –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
class AdminRejectStates(StatesGroup):
    waiting_for_rejection_reason = State()

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∂–∞–ª–æ–±—ã
@dataclass
class Complaint:
    user_id: int
    photo_file_id: Optional[str] = None
    driver_name: str = ""
    position: str = ""
    contact_info: str = ""
    incident_date: str = ""
    location: str = ""
    description: str = ""
    violation_categories: List[str] = field(default_factory=list)
    positive_aspects: List[str] = field(default_factory=list)
    fired_status: str = ""
    rating: int = 0
    additional_files: list = field(default_factory=list)
    created_at: str = ""
    auto_assessment: str = ""
    
    def __post_init__(self):
        if not self.created_at:
            self.created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∂–∞–ª–æ–± –∏ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
complaints_storage: Dict[int, Complaint] = {}
drafts_storage: Dict[int, Complaint] = {}
editing_storage: Dict[int, int] = {}  # admin_id -> complaint_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
admin_reject_storage: Dict[int, int] = {} # admin_id -> complaint_id –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω—ã –ª–∏—à–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏)
POSITIONS = [
    "üöõ –í–æ–¥–∏—Ç–µ–ª—å —Ç—è–≥–∞—á–∞",
    "üì¶ –õ–æ–≥–∏—Å—Ç",
    "üëî –ú–µ–Ω–µ–¥–∂–µ—Ä",
    "üîß –ú–µ—Ö–∞–Ω–∏–∫",
    "üìã –î–∏—Å–ø–µ—Ç—á–µ—Ä"
]

VIOLATION_CATEGORIES = [
    "üö´ –•–∞–º—Å—Ç–≤–æ",
    "‚õΩ –°–ª–∏–≤ —Ç–æ–ø–ª–∏–≤–∞", 
    "üïí –ü—Ä–æ–≥—É–ª",
    "üì¶ –ö—Ä–∞–∂–∞ –≥—Ä—É–∑–∞",
    "üöó –ù–∞—Ä—É—à–µ–Ω–∏–µ –ü–î–î",
    "üç∫ –ê–ª–∫–æ–≥–æ–ª—å–Ω–æ–µ –æ–ø—å—è–Ω–µ–Ω–∏–µ",
    "üö≠ –ö—É—Ä–µ–Ω–∏–µ –≤ —Å–∞–ª–æ–Ω–µ",
    "üì± –†–∞–∑–≥–æ–≤–æ—Ä –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
    "‚è∞ –û–ø–æ–∑–¥–∞–Ω–∏–µ",
    "üí∞ –í—ã–º–æ–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
]

POSITIVE_ASPECTS = [
    "üòä –í–µ–∂–ª–∏–≤–æ—Å—Ç—å",
    "‚è∞ –ü—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å",
    "üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–æ–∂–¥–µ–Ω–∏—è",
    "üßπ –ß–∏—Å—Ç–æ—Ç–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
    "üí¨ –•–æ—Ä–æ—à–µ–µ –æ–±—â–µ–Ω–∏–µ",
    "üéØ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º",
    "ü§ù –ü–æ–º–æ—â—å –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º",
    "üìã –ó–Ω–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞",
    "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å",
    "üí™ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"
]

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
def process_description_text(text: str) -> Dict[str, any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∂–∞–ª–æ–±—ã"""
    return text_processor.process_complaint_text(text, max_length=1000)

def auto_assess_complaint(complaint: Complaint) -> str:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∂–∞–ª–æ–±—ã –ò–ò"""
    score = 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–∞–Ω–Ω—ã—Ö
    if complaint.driver_name and len(complaint.driver_name) > 5:
        score += 1
    
    if complaint.contact_info:
        score += 1
    
    if complaint.description and len(complaint.description) > 50:
        score += 2
    elif complaint.description and len(complaint.description) > 20:
        score += 1
    
    if complaint.violation_categories:
        score += 1
    
    if complaint.location and len(complaint.location) > 10:
        score += 1
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
    if score >= 5:
        return "üü¢ –ü–æ–¥—Ä–æ–±–Ω–æ"
    elif score >= 3:
        return "üü° –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ" 
    else:
        return "üî¥ –ú–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö"

def validate_complaint(complaint: Complaint) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö –∂–∞–ª–æ–±—ã"""
    issues = []
    
    if not complaint.driver_name:
        issues.append("–ù–µ —É–∫–∞–∑–∞–Ω–æ –§–ò–û")
    
    if not complaint.contact_info:
        issues.append("–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç")
    
    if not complaint.incident_date:
        issues.append("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞")
    
    if not complaint.location:
        issues.append("–ù–µ —É–∫–∞–∑–∞–Ω–æ –º–µ—Å—Ç–æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è")
    
    if not complaint.description or len(complaint.description.strip()) < 10:
        issues.append("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    if complaint.rating < 0 or complaint.rating > 10:
        issues.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞")
    
    if issues:
        return False, "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π:\n" + "\n".join(f"‚Ä¢ {issue}" for issue in issues)
    
    return True, "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω—ã–µ"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_start_keyboard():
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É")],
            [KeyboardButton(text="üìÑ –ú–æ–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∏"), KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_repeat_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∂–∞–ª–æ–±—É")],
            [KeyboardButton(text="üìÑ –ú–æ–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∏"), KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

def get_position_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    buttons = []
    for i in range(0, len(POSITIONS), 2):
        row = [InlineKeyboardButton(text=POSITIONS[i], callback_data=f"pos_{i}")]
        if i + 1 < len(POSITIONS):
            row.append(InlineKeyboardButton(text=POSITIONS[i + 1], callback_data=f"pos_{i + 1}"))
        buttons.append(row)
    
    buttons.append([InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="pos_manual")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_contact_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    # –£–¥–∞–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º" –∏ "–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é"
    return types.ReplyKeyboardRemove()

def get_violation_categories_keyboard(selected_categories: Optional[List[str]] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞—Ä—É—à–µ–Ω–∏–π"""
    if selected_categories is None:
        selected_categories = []
    
    buttons = []
    for i in range(0, len(VIOLATION_CATEGORIES), 2):
        row = []
        for j in range(2):
            if i + j < len(VIOLATION_CATEGORIES):
                category = VIOLATION_CATEGORIES[i + j]
                text = f"‚úÖ {category}" if category in selected_categories else category
                row.append(InlineKeyboardButton(
                    text=text, 
                    callback_data=f"viol_{i + j}"
                ))
        buttons.append(row)
    
    buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="viol_continue")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_positive_aspects_keyboard(selected_aspects: Optional[List[str]] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤"""
    if selected_aspects is None:
        selected_aspects = []
    
    buttons = []
    for i in range(0, len(POSITIVE_ASPECTS), 2):
        row = []
        for j in range(2):
            if i + j < len(POSITIVE_ASPECTS):
                aspect = POSITIVE_ASPECTS[i + j]
                text = f"‚úÖ {aspect}" if aspect in selected_aspects else aspect
                row.append(InlineKeyboardButton(
                    text=text,
                    callback_data=f"pos_asp_{i + j}"
                ))
        buttons.append(row)
    
    buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="pos_asp_continue")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_fired_status_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="fired_yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="fired_no")],
            [InlineKeyboardButton(text="‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", callback_data="fired_unknown")]
        ]
    )
    return keyboard

def get_files_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã", callback_data="add_files")],
            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–æ–≤", callback_data="skip_files")]
        ]
    )
    return keyboard

def get_confirmation_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–û–ì–õ–ê–°–ï–ù", callback_data="confirm_complaint")],
            [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏", callback_data="save_draft")]
        ]
    )
    return keyboard

def get_edit_keyboard(complaint_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–∞–ª–æ–±—ã –∞–¥–º–∏–Ω–æ–º"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data=f"edit_name_{complaint_id}")],
            [InlineKeyboardButton(text="üíº –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ª–∂–Ω–æ—Å—Ç—å", callback_data=f"edit_position_{complaint_id}")],
            [InlineKeyboardButton(text="üìû –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", callback_data=f"edit_contact_{complaint_id}")],
            [InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data=f"edit_date_{complaint_id}")],
            [InlineKeyboardButton(text="üìç –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ", callback_data=f"edit_location_{complaint_id}")],
            [InlineKeyboardButton(text="üìñ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{complaint_id}")],
            [InlineKeyboardButton(text="üìä –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data=f"edit_rating_{complaint_id}")],
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"finish_edit_{complaint_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"cancel_edit_{complaint_id}")]
        ]
    )
    return keyboard

def get_admin_keyboard(complaint_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω–∞ –ª–∏—à–Ω—è—è –∫–Ω–æ–ø–∫–∞)"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_approve_{complaint_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", callback_data=f"admin_reject_no_reason_{complaint_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å –ø—Ä–∏—á–∏–Ω–æ–π", callback_data=f"admin_reject_with_reason_{complaint_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_edit_{complaint_id}")]
        ]
    )
    return keyboard

def get_drafts_keyboard(user_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏"""
    if user_id in drafts_storage:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data="continue_draft")],
                [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫", callback_data="delete_draft")]
            ]
        )
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∂–∞–ª–æ–±—É", callback_data="new_complaint")]
            ]
        )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. 
–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π.

üîí –í–∞—à–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ - –Ω–∏–∫–∞–∫–∏–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –Ω–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await message.answer(welcome_text, reply_markup=get_start_keyboard())

@dp.message(F.text == "üìù –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É")
async def start_complaint(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã"""
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∂–∞–ª–æ–±—É
    complaints_storage[user_id] = Complaint(user_id=user_id)
    
    await message.answer(
        "üì∏ –®–∞–≥ 1/11: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è. –§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    await state.set_state(ComplaintStates.waiting_for_photo)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∂–∞–ª–æ–±—É"
@dp.message(F.text == "üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∂–∞–ª–æ–±—É")
async def start_another_complaint(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∂–∞–ª–æ–±—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π"""
    await start_complaint(message, state)

@dp.message(F.text == "üìÑ –ú–æ–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∏")
async def show_drafts(message: types.Message):
    """–ü–æ–∫–∞–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    if user_id in drafts_storage:
        draft = drafts_storage[user_id]
        draft_text = f"""
üìÑ –£ –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫:

üë§ –§–ò–û: {draft.driver_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {draft.position or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {draft.contact_info or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìÖ –î–∞—Ç–∞: {draft.incident_date or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
üìç –ú–µ—Å—Ç–æ: {draft.location or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

–°–æ–∑–¥–∞–Ω: {draft.created_at}
"""
        await message.answer(draft_text, reply_markup=get_drafts_keyboard(user_id))
    else:
        await message.answer(
            "üìÑ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤.\n\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∂–∞–ª–æ–±—ã:",
            reply_markup=get_drafts_keyboard(user_id)
        )

@dp.callback_query(F.data == "continue_draft")
async def continue_draft(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º"""
    user_id = callback.from_user.id
    
    if user_id in drafts_storage:
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∂–∞–ª–æ–±—ã
        complaints_storage[user_id] = drafts_storage[user_id]
        del drafts_storage[user_id]
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º answer –≤–º–µ—Å—Ç–æ edit_text –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await callback.message.answer(
            "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å.\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.",
            reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
        )
        await callback.message.delete()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        complaint = complaints_storage[user_id]
        
        if not complaint.photo_file_id:
            await callback.message.answer("üì∏ –®–∞–≥ 1/11: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:")
            await state.set_state(ComplaintStates.waiting_for_photo)
        elif not complaint.driver_name:
            await callback.message.answer("üë§ –®–∞–≥ 2/11: –£–∫–∞–∂–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
            await state.set_state(ComplaintStates.waiting_for_name)
        elif not complaint.position:
            await callback.message.answer("üíº –®–∞–≥ 3/11: –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=get_position_keyboard())
            await state.set_state(ComplaintStates.waiting_for_position)
        elif not complaint.contact_info:
            await callback.message.answer("üìû –®–∞–≥ 4/11: –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n\n–ü—Ä–∏–º–µ—Ä: +7 900 123-45-67 –∏–ª–∏ –¢–∞–±.‚Ññ12345", reply_markup=get_contact_keyboard())
            await state.set_state(ComplaintStates.waiting_for_contact)
        elif not complaint.incident_date:
            await callback.message.answer("üìÖ –®–∞–≥ 5/11: –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:")
            await state.set_state(ComplaintStates.waiting_for_date)
        elif not complaint.location:
            await callback.message.answer("üìç –®–∞–≥ 6/11: –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è:")
            await state.set_state(ComplaintStates.waiting_for_location)
        elif not complaint.description:
            await callback.message.answer("üìñ –®–∞–≥ 7/11: –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ:")
            await state.set_state(ComplaintStates.waiting_for_description)
        elif not complaint.violation_categories:
            await callback.message.answer("üö´ –®–∞–≥ 8/11: –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π:", reply_markup=get_violation_categories_keyboard())
            await state.set_state(ComplaintStates.waiting_for_violation_category)
        elif not complaint.positive_aspects:
            await callback.message.answer("üòä –®–∞–≥ 9/11: –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=get_positive_aspects_keyboard())
            await state.set_state(ComplaintStates.waiting_for_positive_aspects)
        elif not complaint.fired_status:
            await callback.message.answer("‚ùå –®–∞–≥ 10/11: –ë—ã–ª –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–≤–æ–ª–µ–Ω?", reply_markup=get_fired_status_keyboard())
            await state.set_state(ComplaintStates.waiting_for_fired_status)
        elif not complaint.rating:
            await callback.message.answer("üìä –®–∞–≥ 11/11: –û—Ü–µ–Ω–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç 0 –¥–æ 10:")
            await state.set_state(ComplaintStates.waiting_for_rating)
        elif not complaint.additional_files:
            await callback.message.answer("üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:", reply_markup=get_files_keyboard())
            await state.set_state(ComplaintStates.waiting_for_files)
        else:
            # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            await show_confirmation(callback.message, state)

@dp.callback_query(F.data == "delete_draft")
async def delete_draft(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
    user_id = callback.from_user.id
    
    if user_id in drafts_storage:
        del drafts_storage[user_id]
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º answer + delete –≤–º–µ—Å—Ç–æ edit_text –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.answer(
            "üóëÔ∏è –ß–µ—Ä–Ω–æ–≤–∏–∫ —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_start_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        )
        await callback.message.delete()
    
    await callback.answer()

@dp.callback_query(F.data == "new_complaint")
async def new_complaint_from_callback(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∂–∞–ª–æ–±—ã –∏–∑ callback"""
    user_id = callback.from_user.id
    
    complaints_storage[user_id] = Complaint(user_id=user_id)
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º answer + delete –≤–º–µ—Å—Ç–æ edit_text
    await callback.message.answer(
        "üì∏ –®–∞–≥ 1/11: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞\n\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è. –§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã.",
        reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
    )
    await callback.message.delete()
    
    await state.set_state(ComplaintStates.waiting_for_photo)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@dp.message(ComplaintStates.waiting_for_photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
    user_id = message.from_user.id
    
    if user_id in complaints_storage:
        photo = message.photo[-1]
        complaints_storage[user_id].photo_file_id = photo.file_id
        
        await message.answer(
            "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
            "üë§ –®–∞–≥ 2/11: –£–∫–∞–∂–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
        )
        
        await state.set_state(ComplaintStates.waiting_for_name)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û
@dp.message(ComplaintStates.waiting_for_name, F.text)
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û"""
    user_id = message.from_user.id
    
    if user_id in complaints_storage:
        name = message.text.strip()
        if len(name) < 3:
            await message.answer("‚ùå –§–ò–û —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        complaints_storage[user_id].driver_name = name
        
        await message.answer(
            f"‚úÖ –§–ò–û –∑–∞–ø–∏—Å–∞–Ω–æ!\n\n"
            "üíº –®–∞–≥ 3/11: –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
            reply_markup=get_position_keyboard()
        )
        
        await state.set_state(ComplaintStates.waiting_for_position)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
@dp.callback_query(ComplaintStates.waiting_for_position)
async def process_position(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏"""
    user_id = callback.from_user.id
    
    if user_id in complaints_storage:
        if callback.data.startswith("pos_"):
            if callback.data == "pos_manual":
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º answer + delete –≤–º–µ—Å—Ç–æ edit_text
                await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤—Ä—É—á–Ω—É—é:")
                await callback.message.delete()
                return
            
            try:
                pos_index = int(callback.data.split("_")[1])
                position = POSITIONS[pos_index]
                complaints_storage[user_id].position = position
                
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º answer + delete –≤–º–µ—Å—Ç–æ edit_text
                await callback.message.answer(
                    f"‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞: {position}\n\n"
                    "üìû –®–∞–≥ 4/11: –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
                    "–ü—Ä–∏–º–µ—Ä: +7 900 123-45-67 –∏–ª–∏ –¢–∞–±.‚Ññ12345",
                    reply_markup=get_contact_keyboard()
                )
                await callback.message.delete()
                
                await state.set_state(ComplaintStates.waiting_for_contact)
                
            except (ValueError, IndexError):
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
        
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
@dp.message(ComplaintStates.waiting_for_position, F.text)
async def process_position_manual(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"""
    user_id = message.from_user.id
    
    if user_id in complaints_storage:
        position = message.text.strip()
        if len(position) < 2:
            await message.answer("‚ùå –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        complaints_storage[user_id].position = position
        
        await message.answer(
            f"‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞: {position}\n\n"
            "üìû –®–∞–≥ 4/11: –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä: +7 900 123-45-67 –∏–ª–∏ –¢–∞–±.‚Ññ12345",
            reply_markup=get_contact_keyboard()
        )
        
        await state.set_state(ComplaintStates.waiting_for_contact)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
# –£–¥–∞–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ F.contact

# –£–¥–∞–ª–µ–Ω @dp.message(ComplaintStates.waiting_for_contact, F.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é")
# async def process_contact_manual_request(message: types.Message, state: FSMContext):
#     """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≤—Ä—É—á–Ω—É—é"""
#     await message.answer(
#         "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –¥—Ä—É–≥—É—é –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n"
#         "–ü—Ä–∏–º–µ—Ä: +7 900 123-45-67 –∏–ª–∏ –¢–∞–±.‚Ññ12345",
#         reply_markup=types.ReplyKeyboardRemove()
#     )

@dp.message(ComplaintStates.waiting_for_contact, F.text)
async def process_contact_manual(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤—Ä—É—á–Ω—É—é"""
    user_id = message.from_user.id
    
    if user_id in complaints_storage:
        contact_info = message.text.strip()
        if len(contact_info) < 5:
            await message.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        complaints_storage[user_id].contact_info = contact_info
        
        await message.answer(
            f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –∑–∞–ø–∏—Å–∞–Ω: {contact_info}\n\n"
            "üìÖ –®–∞–≥ 5/11: –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä: 06.07.2025 –∏–ª–∏ –≤—á–µ—Ä–∞, —Å–µ–≥–æ–¥–Ω—è"
        )
        
        await state.set_state(ComplaintStates.waiting_for_date)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
@dp.message(ComplaintStates.waiting_for_date, F.text)
async def process_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã"""
    user_id = message.from_user.id
    
    if user_id in complaints_storage:
        date_text = message.text.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç
        if date_text.lower() in ['—Å–µ–≥–æ–¥–Ω—è', 'today']:
            date_text = datetime.now().strftime("%d.%m.%Y")
        elif date_text.lower() in ['–≤—á–µ—Ä–∞', 'yesterday']:
            from datetime import timedelta
            yesterday = datetime.now() - timedelta(days=1)
            date_text = yesterday.strftime("%d.%m.%Y")
        
        complaints_storage[user_id].incident_date = date_text
        
        await message.answer(
            "‚úÖ –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!\n\n"
            "üìç –®–∞–≥ 6/11: –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥.1 –∏–ª–∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç"
        )
        
        await state.set_state(ComplaintStates.waiting_for_location)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞
@dp.message(ComplaintStates.waiting_for_location, F.text)
async def process_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞"""
    user_id = message.from_user.id
    
    if user_id in complaints_storage:
        location = message.text.strip()
        if len(location) < 5:
            await message.answer("‚ùå –ú–µ—Å—Ç–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ –∞–¥—Ä–µ—Å:")
            return
        
        complaints_storage[user_id].location = location
        
        await message.answer(
            "‚úÖ –ú–µ—Å—Ç–æ –∑–∞–ø–∏—Å–∞–Ω–æ!\n\n"
            "üìñ –®–∞–≥ 7/11: –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–æ\n\n"
            "–ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤. –ò–∑–±–µ–≥–∞–π—Ç–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏.\n"
            "–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –∫–∞–∫ –≤–µ–ª —Å–µ–±—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –∫–∞–∫–∏–µ –±—ã–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è."
        )
        
        await state.set_state(ComplaintStates.waiting_for_description)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ë–ï–ó —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö)
@dp.message(ComplaintStates.waiting_for_description, F.text)
async def process_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    user_id = message.from_user.id
    
    if user_id in complaints_storage:
        description = message.text.strip()
        
        if len(description) < 10:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
            return
        
        if len(description) > 1000:
            await message.answer(f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(description)} —Å–∏–º–≤–æ–ª–æ–≤). –ú–∞–∫—Å–∏–º—É–º 1000. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ:")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¢–ò–•–û (–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        processing_result = process_description_text(description)
        processed_description = processing_result['processed_text']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        complaints_storage[user_id].description = processed_description
        
        # –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ë–ï–ó —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await message.answer(
            "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!\n\n"
            "üö´ –®–∞–≥ 8/11: –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π\n\n"
            "–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:",
            reply_markup=get_violation_categories_keyboard()
        )
        
        await state.set_state(ComplaintStates.waiting_for_violation_category)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞—Ä—É—à–µ–Ω–∏–π
@dp.callback_query(ComplaintStates.waiting_for_violation_category)
async def process_violation_category(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞—Ä—É—à–µ–Ω–∏–π"""
    user_id = callback.from_user.id
    
    if user_id in complaints_storage:
        complaint = complaints_storage[user_id]
        
        if callback.data == "viol_continue":
            if not complaint.violation_categories:
                await callback.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Ä—É—à–µ–Ω–∏—è")
                return
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º answer + delete –≤–º–µ—Å—Ç–æ edit_text
            await callback.message.answer(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(complaint.violation_categories)}\n\n"
                "üòä –®–∞–≥ 9/11: –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥–∞—Ç—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—É—é –æ—Ü–µ–Ω–∫—É:",
                reply_markup=get_positive_aspects_keyboard()
            )
            await callback.message.delete()
            
            await state.set_state(ComplaintStates.waiting_for_positive_aspects)
            
        elif callback.data.startswith("viol_"):
            try:
                viol_index = int(callback.data.split("_")[1])
                category = VIOLATION_CATEGORIES[viol_index]
                
                if category in complaint.violation_categories:
                    complaint.violation_categories.remove(category)
                else:
                    complaint.violation_categories.append(category)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await callback.message.edit_reply_markup(
                    reply_markup=get_violation_categories_keyboard(complaint.violation_categories)
                )
                
            except (ValueError, IndexError):
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
@dp.callback_query(ComplaintStates.waiting_for_positive_aspects)
async def process_positive_aspects(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤"""
    user_id = callback.from_user.id
    
    if user_id in complaints_storage:
        complaint = complaints_storage[user_id]
        
        if callback.data == "pos_asp_continue":
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º answer + delete –≤–º–µ—Å—Ç–æ edit_text
            await callback.message.answer(
                f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤: {len(complaint.positive_aspects)}\n\n"
                "‚ùå –®–∞–≥ 10/11: –ë—ã–ª –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–≤–æ–ª–µ–Ω?\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                reply_markup=get_fired_status_keyboard()
            )
            await callback.message.delete()
            
            await state.set_state(ComplaintStates.waiting_for_fired_status)
            
        elif callback.data.startswith("pos_asp_"):
            try:
                asp_index = int(callback.data.split("_")[2])
                aspect = POSITIVE_ASPECTS[asp_index]
                
                if aspect in complaint.positive_aspects:
                    complaint.positive_aspects.remove(aspect)
                else:
                    complaint.positive_aspects.append(aspect)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await callback.message.edit_reply_markup(
                    reply_markup=get_positive_aspects_keyboard(complaint.positive_aspects)
                )
                
            except (ValueError, IndexError):
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è
@dp.callback_query(ComplaintStates.waiting_for_fired_status)
async def process_fired_status(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    
    if user_id in complaints_storage:
        status_map = {
            "fired_yes": "–î–∞",
            "fired_no": "–ù–µ—Ç", 
            "fired_unknown": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        }
        
        status = status_map.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        complaints_storage[user_id].fired_status = status
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º answer + delete –≤–º–µ—Å—Ç–æ edit_text
        await callback.message.answer(
            f"‚úÖ –°—Ç–∞—Ç—É—Å —É–≤–æ–ª—å–Ω–µ–Ω–∏—è: {status}\n\n"
            "üìä –®–∞–≥ 11/11: –û—Ü–µ–Ω–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –æ—Ç 0 –¥–æ 10\n\n"
            "0 - —É–∂–∞—Å–Ω–æ, 10 - –æ—Ç–ª–∏—á–Ω–æ\n"
            "–£—á—Ç–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ.\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É:"
        )
        await callback.message.delete()
        
        await state.set_state(ComplaintStates.waiting_for_rating)
        await callback.answer()
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏
@dp.message(ComplaintStates.waiting_for_rating, F.text)
async def process_rating(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏"""
    user_id = message.from_user.id
    
    if user_id in complaints_storage:
        try:
            rating = int(message.text.strip())
            if rating < 0 or rating > 10:
                await message.answer("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            complaint = complaints_storage[user_id]
            complaint.rating = rating
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–æ—Ü–µ–Ω–∫—É
            complaint.auto_assessment = auto_assess_complaint(complaint)
            
            await message.answer(
                f"‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞: {rating}/10\n"
                f"ü§ñ –ê–≤—Ç–æ–æ—Ü–µ–Ω–∫–∞ –∂–∞–ª–æ–±—ã: {complaint.auto_assessment}\n\n"
                "üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∂–∞–ª–æ–±—ã.",
                reply_markup=get_files_keyboard()
            )
            
            await state.set_state(ComplaintStates.waiting_for_files)
            
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10:")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
@dp.callback_query(ComplaintStates.waiting_for_files)
async def process_files_choice(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤"""
    if callback.data == "add_files":
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º answer + delete –≤–º–µ—Å—Ç–æ edit_text
        await callback.message.answer(
            "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:\n\n"
            "‚Ä¢ –§–æ—Ç–æ\n"
            "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOC)\n"
            "‚Ä¢ –í–∏–¥–µ–æ\n\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ'"
        )
        await callback.message.delete()
        await callback.answer()
    elif callback.data == "skip_files":
        await show_confirmation(callback.message, state)
        await callback.answer()

@dp.message(ComplaintStates.waiting_for_files, F.text)
async def process_files_done(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    if message.text.lower() in ['–≥–æ—Ç–æ–≤–æ', 'done', '–≥–æ—Ç–æ–≤']:
        await show_confirmation(message, state)

@dp.message(ComplaintStates.waiting_for_files, F.photo | F.document | F.video)
async def process_additional_files(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    user_id = message.from_user.id
    
    if user_id in complaints_storage:
        file_info = None
        
        if message.photo:
            file_info = {
                'type': 'photo',
                'file_id': message.photo[-1].file_id,
                'caption': message.caption or ''
            }
        elif message.document:
            file_info = {
                'type': 'document',
                'file_id': message.document.file_id,
                'filename': message.document.file_name or 'document',
                'caption': message.caption or ''
            }
        elif message.video:
            file_info = {
                'type': 'video',
                'file_id': message.video.file_id,
                'caption': message.caption or ''
            }
        
        if file_info:
            complaints_storage[user_id].additional_files.append(file_info)
            await message.answer(
                f"‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(complaints_storage[user_id].additional_files)}\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
            )

async def show_confirmation(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    confirmation_text = """
‚öñÔ∏è –Æ–†–ò–î–ò–ß–ï–°–ö–û–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï

–Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–Ω–æ–π –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ. –Ø –ø—Ä–∏–Ω–∏–º–∞—é –ø–æ–ª–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∏ –º–æ—Ä–∞–ª—å–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –µ—ë —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∫–∞–Ω–∞–ª–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–µ—Å—É—Ç.

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü–æ–¥–∞—á–∞ –ª–æ–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –ø–æ–≤–ª–µ—á—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await message.answer(
        confirmation_text,
        reply_markup=get_confirmation_keyboard()
    )
    
    await state.set_state(ComplaintStates.waiting_for_confirmation)

@dp.callback_query(ComplaintStates.waiting_for_confirmation)
async def process_confirmation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    
    if callback.data == "confirm_complaint":
        if user_id in complaints_storage:
            complaint = complaints_storage[user_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
            is_valid, validation_message = validate_complaint(complaint)
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º answer + delete –≤–º–µ—Å—Ç–æ edit_text –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∞
            await callback.message.answer(
                "‚úÖ –ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
                "–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. "
                "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –æ–Ω–∞ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
                reply_markup=get_repeat_keyboard()  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∞
            )
            await callback.message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
            await send_to_admin(complaint, is_valid, validation_message)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            await callback.answer("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")
    
    elif callback.data == "save_draft":
        if user_id in complaints_storage:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏
            drafts_storage[user_id] = complaints_storage[user_id]
            del complaints_storage[user_id]
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º answer + delete –≤–º–µ—Å—Ç–æ edit_text –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            await callback.message.answer(
                "üíæ –ñ–∞–ª–æ–±–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏!\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –µ—ë –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ú–æ–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∏'.",
                reply_markup=get_start_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            )
            await callback.message.delete()
            
            await state.clear()
            await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏!")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

async def send_to_admin(complaint: Complaint, is_valid: bool, validation_message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –∞–¥–º–∏–Ω—É"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        categories_text = ", ".join(complaint.violation_categories) if complaint.violation_categories else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        positive_text = ", ".join(complaint.positive_aspects) if complaint.positive_aspects else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        
        admin_text = f"""
üîç –ù–û–í–ê–Ø –ñ–ê–õ–û–ë–ê #{complaint.user_id}

üë§ –§–ò–û: {complaint.driver_name}
üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {complaint.position}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {complaint.contact_info}
üìÖ –î–∞—Ç–∞: {complaint.incident_date}
üìç –ú–µ—Å—Ç–æ: {complaint.location}
üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {complaint.description}
üö´ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_text}
üòä –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ: {positive_text}
‚ùå –£–≤–æ–ª–µ–Ω: {complaint.fired_status}
üìä –û—Ü–µ–Ω–∫–∞: {complaint.rating}/10
ü§ñ –ê–≤—Ç–æ–æ—Ü–µ–Ω–∫–∞: {complaint.auto_assessment}
üìé –î–æ–ø. —Ñ–∞–π–ª—ã: {len(complaint.additional_files)} —à—Ç.

{validation_message}

–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {complaint.created_at}
"""
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –ø–æ ADMIN_ID (int)
        if complaint.photo_file_id:
            await bot.send_photo(
                chat_id=ADMIN_ID,
                photo=complaint.photo_file_id,
                caption=admin_text,
                reply_markup=get_admin_keyboard(complaint.user_id)
            )
        else:
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_text,
                reply_markup=get_admin_keyboard(complaint.user_id)
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        if complaint.additional_files:
            media_group = []
            for i, file_info in enumerate(complaint.additional_files[:10]):
                if file_info['type'] == 'photo':
                    media_group.append(InputMediaPhoto(
                        media=file_info['file_id'],
                        caption=f"–î–æ–ø. —Ñ–æ—Ç–æ {i+1}" + (f": {file_info['caption']}" if file_info['caption'] else "")
                    ))
                elif file_info['type'] == 'document':
                    media_group.append(InputMediaDocument(
                        media=file_info['file_id'],
                        caption=f"–î–æ–∫—É–º–µ–Ω—Ç {i+1}" + (f": {file_info['caption']}" if file_info['caption'] else "")
                    ))
                elif file_info['type'] == 'video':
                    media_group.append(InputMediaVideo(
                        media=file_info['file_id'],
                        caption=f"–í–∏–¥–µ–æ {i+1}" + (f": {file_info['caption']}" if file_info['caption'] else "")
                    ))
            
            if media_group:
                await bot.send_media_group(chat_id=ADMIN_ID, media=media_group)
        
        logger.info(f"–ñ–∞–ª–æ–±–∞ #{complaint.user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
@dp.callback_query(F.data.startswith("edit_"))
async def process_edit_field(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        admin_id = callback.from_user.id
        if admin_id != ADMIN_ID:
            await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        parts = callback.data.split("_")
        field = parts[1]
        complaint_id = int(parts[2])
        
        if admin_id not in editing_storage or editing_storage[admin_id] != complaint_id:
            await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        if complaint_id not in complaints_storage:
            await callback.answer("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        complaint = complaints_storage[complaint_id]
        
        if field == "name":
            await callback.message.answer(
                f"üë§ –¢–µ–∫—É—â–µ–µ –§–ò–û: {complaint.driver_name}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:"
            )
            await state.set_state(AdminEditStates.editing_name)
            
        elif field == "position":
            await callback.message.answer(
                f"üíº –¢–µ–∫—É—â–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {complaint.position}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
                reply_markup=get_position_keyboard()
            )
            await state.set_state(AdminEditStates.editing_position)
            
        elif field == "contact":
            await callback.message.answer(
                f"üìû –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: {complaint.contact_info}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:"
            )
            await state.set_state(AdminEditStates.editing_contact)
            
        elif field == "date":
            await callback.message.answer(
                f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {complaint.incident_date}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:"
            )
            await state.set_state(AdminEditStates.editing_date)
            
        elif field == "location":
            await callback.message.answer(
                f"üìç –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ: {complaint.location}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ:"
            )
            await state.set_state(AdminEditStates.editing_location)
            
        elif field == "description":
            await callback.message.answer(
                f"üìñ –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {complaint.description}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
            )
            await state.set_state(AdminEditStates.editing_description)
            
        elif field == "rating":
            await callback.message.answer(
                f"üìä –¢–µ–∫—É—â–∞—è –æ—Ü–µ–Ω–∫–∞: {complaint.rating}/10\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É (0-10):"
            )
            await state.set_state(AdminEditStates.editing_rating)
        
        await callback.message.delete()
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

@dp.callback_query(F.data.startswith("finish_edit_"))
async def finish_editing(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        admin_id = callback.from_user.id
        complaint_id = int(callback.data.split("_")[2])
        
        if admin_id in editing_storage:
            del editing_storage[admin_id]
        
        await state.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∂–∞–ª–æ–±—É
        complaint = complaints_storage[complaint_id]
        updated_text = f"""
‚úÖ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û

–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∂–∞–ª–æ–±—ã #{complaint_id}:
üë§ –§–ò–û: {complaint.driver_name}
üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {complaint.position}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {complaint.contact_info}
üìÖ –î–∞—Ç–∞: {complaint.incident_date}
üìç –ú–µ—Å—Ç–æ: {complaint.location}
üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {complaint.description}
üìä –û—Ü–µ–Ω–∫–∞: {complaint.rating}/10

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        await callback.message.answer(
            updated_text,
            reply_markup=get_admin_keyboard(complaint_id)
        )
        await callback.message.delete()
        await callback.answer("‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("cancel_edit_"))
async def cancel_editing(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        admin_id = callback.from_user.id
        complaint_id = int(callback.data.split("_")[2])
        
        if admin_id in editing_storage:
            del editing_storage[admin_id]
        
        await state.clear()
        
        await callback.message.answer(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_admin_keyboard(complaint_id)
        )
        await callback.message.delete()
        await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
@dp.message(AdminEditStates.editing_name, F.text)
async def edit_name(message: types.Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û"""
    admin_id = message.from_user.id
    if admin_id not in editing_storage:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    complaint_id = editing_storage[admin_id]
    new_name = message.text.strip()
    
    if len(new_name) < 3:
        await message.answer("‚ùå –§–ò–û —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    complaints_storage[complaint_id].driver_name = new_name
    await message.answer(
        f"‚úÖ –§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_edit_keyboard(complaint_id)
    )
    await state.clear()

@dp.message(AdminEditStates.editing_contact, F.text)
async def edit_contact(message: types.Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    admin_id = message.from_user.id
    if admin_id not in editing_storage:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    complaint_id = editing_storage[admin_id]
    new_contact = message.text.strip()
    
    if len(new_contact) < 5:
        await message.answer("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    complaints_storage[complaint_id].contact_info = new_contact
    await message.answer(
        f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {new_contact}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_edit_keyboard(complaint_id)
    )
    await state.clear()

@dp.message(AdminEditStates.editing_date, F.text)
async def edit_date(message: types.Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã"""
    admin_id = message.from_user.id
    if admin_id not in editing_storage:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    complaint_id = editing_storage[admin_id]
    new_date = message.text.strip()
    
    complaints_storage[complaint_id].incident_date = new_date
    await message.answer(
        f"‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_date}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_edit_keyboard(complaint_id)
    )
    await state.clear()

@dp.message(AdminEditStates.editing_location, F.text)
async def edit_location(message: types.Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞"""
    admin_id = message.from_user.id
    if admin_id not in editing_storage:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    complaint_id = editing_storage[admin_id]
    new_location = message.text.strip()
    
    if len(new_location) < 5:
        await message.answer("‚ùå –ú–µ—Å—Ç–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    complaints_storage[complaint_id].location = new_location
    await message.answer(
        f"‚úÖ –ú–µ—Å—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_location}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_edit_keyboard(complaint_id)
    )
    await state.clear()

@dp.message(AdminEditStates.editing_description, F.text)
async def edit_description(message: types.Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    admin_id = message.from_user.id
    if admin_id not in editing_storage:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    complaint_id = editing_storage[admin_id]
    new_description = message.text.strip()
    
    if len(new_description) < 10:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if len(new_description) > 1000:
        await message.answer(f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({len(new_description)} —Å–∏–º–≤–æ–ª–æ–≤). –ú–∞–∫—Å–∏–º—É–º 1000:")
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    processing_result = process_description_text(new_description)
    processed_description = processing_result['processed_text']
    
    complaints_storage[complaint_id].description = processed_description
    await message.answer(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_edit_keyboard(complaint_id)
    )
    await state.clear()

@dp.message(AdminEditStates.editing_rating, F.text)
async def edit_rating(message: types.Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏"""
    admin_id = message.from_user.id
    if admin_id not in editing_storage:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    complaint_id = editing_storage[admin_id]
    
    try:
        new_rating = int(message.text.strip())
        if new_rating < 0 or new_rating > 10:
            await message.answer("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        complaints_storage[complaint_id].rating = new_rating
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–æ—Ü–µ–Ω–∫—É
        complaints_storage[complaint_id].auto_assessment = auto_assess_complaint(complaints_storage[complaint_id])
        
        await message.answer(
            f"‚úÖ –û—Ü–µ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_rating}/10\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=get_edit_keyboard(complaint_id)
        )
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
@dp.callback_query(AdminEditStates.editing_position)
async def edit_position_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    admin_id = callback.from_user.id
    if admin_id not in editing_storage:
        await callback.answer("‚ùå –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    complaint_id = editing_storage[admin_id]
    
    if callback.data.startswith("pos_"):
        if callback.data == "pos_manual":
            await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤—Ä—É—á–Ω—É—é:")
            await callback.message.delete()
            return
        
        try:
            pos_index = int(callback.data.split("_")[1])
            position = POSITIONS[pos_index]
            complaints_storage[complaint_id].position = position
            
            await callback.message.answer(
                f"‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {position}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=get_edit_keyboard(complaint_id)
            )
            await callback.message.delete()
            await state.clear()
            
        except (ValueError, IndexError):
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
    
    await callback.answer()

@dp.message(AdminEditStates.editing_position, F.text)
async def edit_position_manual(message: types.Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"""
    admin_id = message.from_user.id
    if admin_id not in editing_storage:
        await message.answer("‚ùå –°–µ—Å—Å–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    complaint_id = editing_storage[admin_id]
    new_position = message.text.strip()
    
    if len(new_position) < 2:
        await message.answer("‚ùå –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    complaints_storage[complaint_id].position = new_position
    await message.answer(
        f"‚úÖ –î–æ–ª–∂–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_position}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_edit_keyboard(complaint_id)
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫)
@dp.callback_query(F.data.startswith("admin_approve_"))
async def admin_approve_complaint(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∂–∞–ª–æ–±—ã –∞–¥–º–∏–Ω–æ–º"""
    try:
        complaint_id = int(callback.data.split("_")[2])
        
        if complaint_id not in complaints_storage:
            await callback.answer("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        complaint = complaints_storage[complaint_id]
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        await publish_to_channel(complaint)
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º answer + delete –≤–º–µ—Å—Ç–æ edit_text
        await callback.message.answer(f"‚úÖ –ñ–∞–ª–æ–±–∞ #{complaint_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ")
        await callback.message.delete()
        # –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        del complaints_storage[complaint_id]
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (approve): {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

@dp.callback_query(F.data.startswith("admin_reject_no_reason_"))
async def admin_reject_no_reason(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"""
    try:
        complaint_id = int(callback.data.split("_")[4])
        
        if complaint_id not in complaints_storage:
            await callback.answer("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        complaint = complaints_storage[complaint_id]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        user_message = "‚ùå –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã."
        await bot.send_message(chat_id=complaint.user_id, text=user_message)
        
        await callback.message.answer(f"‚ùå –ñ–∞–ª–æ–±–∞ #{complaint_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã.")
        await callback.message.delete()
        
        del complaints_storage[complaint_id]
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±—ã –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("admin_reject_with_reason_"))
async def admin_reject_with_reason_prompt(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    try:
        complaint_id = int(callback.data.split("_")[4])
        
        if complaint_id not in complaints_storage:
            await callback.answer("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        admin_reject_storage[callback.from_user.id] = complaint_id
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±—ã:")
        await state.set_state(AdminRejectStates.waiting_for_rejection_reason)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.message(AdminRejectStates.waiting_for_rejection_reason, F.text)
async def admin_reject_with_reason(message: types.Message, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã —Å –ø—Ä–∏—á–∏–Ω–æ–π"""
    try:
        admin_id = message.from_user.id
        if admin_id not in admin_reject_storage:
            await message.answer("‚ùå –°–µ—Å—Å–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        complaint_id = admin_reject_storage[admin_id]
        rejection_reason = message.text.strip()
        
        if complaint_id not in complaints_storage:
            await message.answer("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        complaint = complaints_storage[complaint_id]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Å –ø—Ä–∏—á–∏–Ω–æ–π
        user_message = f"‚ùå –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–∏—á–∏–Ω–µ:\n\n{rejection_reason}"
        await bot.send_message(chat_id=complaint.user_id, text=user_message)
        
        await message.answer(f"‚ùå –ñ–∞–ª–æ–±–∞ #{complaint_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π: {rejection_reason}")
        
        del complaints_storage[complaint_id]
        del admin_reject_storage[admin_id]
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±—ã —Å –ø—Ä–∏—á–∏–Ω–æ–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞")

@dp.callback_query(F.data.startswith("admin_edit_"))
async def admin_edit_complaint(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∂–∞–ª–æ–±—ã –∞–¥–º–∏–Ω–æ–º"""
    try:
        complaint_id = int(callback.data.split("_")[2])
        
        if complaint_id not in complaints_storage:
            await callback.answer("‚ùå –ñ–∞–ª–æ–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        editing_storage[callback.from_user.id] = complaint_id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        complaint = complaints_storage[complaint_id]
        edit_text = f"""
‚úèÔ∏è –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ñ–ê–õ–û–ë–´ #{complaint_id}

–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:
üë§ –§–ò–û: {complaint.driver_name}
üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {complaint.position}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {complaint.contact_info}
üìÖ –î–∞—Ç–∞: {complaint.incident_date}
üìç –ú–µ—Å—Ç–æ: {complaint.location}
üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {complaint.description[:100]}...
üìä –û—Ü–µ–Ω–∫–∞: {complaint.rating}/10

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
"""
        
        await callback.message.answer(
            edit_text,
            reply_markup=get_edit_keyboard(complaint_id)
        )
        await callback.message.delete()
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (edit): {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

async def publish_to_channel(complaint: Complaint):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∂–∞–ª–æ–±—ã –≤ –∫–∞–Ω–∞–ª"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ö—ç—à—Ç–µ–≥–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        hashtags = []
        for category in complaint.violation_categories:
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å–æ–∑–¥–∞–µ–º —Ö—ç—à—Ç–µ–≥
            clean_category = re.sub(r'[^\\w\\s]', '', category).strip().replace(' ', '_')
            hashtags.append(f"#{clean_category}")
        
        hashtags_text = " ".join(hashtags) if hashtags else ""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        channel_text = f"""
üö® –ñ–∞–ª–æ–±–∞ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞

üë§ –§–ò–û: {complaint.driver_name}
üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {complaint.position}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: {complaint.contact_info}
üìÖ –î–∞—Ç–∞: {complaint.incident_date}
üìç –ú–µ—Å—Ç–æ: {complaint.location}
üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {complaint.description}
üö´ –ù–∞—Ä—É—à–µ–Ω–∏—è: {", ".join(complaint.violation_categories) if complaint.violation_categories else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
üòä –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ: {", ".join(complaint.positive_aspects) if complaint.positive_aspects else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
‚ùå –£–≤–æ–ª–µ–Ω: {complaint.fired_status}
üìä –û—Ü–µ–Ω–∫–∞: {complaint.rating}/10
ü§ñ {complaint.auto_assessment}
üìé –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {len(complaint.additional_files) + (1 if complaint.photo_file_id else 0)} —Ñ–∞–π–ª(–æ–≤)

{hashtags_text}

üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–í–æ–∑—Ä–∞–∑–∏—Ç—å" –∏ "–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞"
        objection_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚öñÔ∏è –í–æ–∑—Ä–∞–∑–∏—Ç—å",
                        url=f"https://t.me/{ADMIN_USERNAME}"
                    ),
                    InlineKeyboardButton(
                        text="üìù –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞",
                        url=f"https://t.me/{(await bot.get_me()).username}"
                    )
                ]
            ]
        )
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
        if complaint.photo_file_id:
            await bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=complaint.photo_file_id,
                caption=channel_text,
                reply_markup=objection_keyboard
            )
        else:
            await bot.send_message(
                chat_id=CHANNEL_ID,
                text=channel_text,
                reply_markup=objection_keyboard
            )
        
        # –ü—É–±–ª–∏–∫—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        if complaint.additional_files:
            media_group = []
            for i, file_info in enumerate(complaint.additional_files[:10]):
                if file_info['type'] == 'photo':
                    media_group.append(InputMediaPhoto(media=file_info['file_id']))
                elif file_info['type'] == 'document':
                    media_group.append(InputMediaDocument(media=file_info['file_id']))
                elif file_info['type'] == 'video':
                    media_group.append(InputMediaVideo(media=file_info['file_id']))
            
            if media_group:
                await bot.send_media_group(chat_id=CHANNEL_ID, media=media_group)
        
        logger.info(f"–ñ–∞–ª–æ–±–∞ #{complaint.user_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def show_info(message: types.Message):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    info_text = f"""
‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ

üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ê–Ω–æ–Ω–∏–º–Ω–∞—è –ø–æ–¥–∞—á–∞ –∂–∞–ª–æ–± –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

üîí –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å: –í–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –Ω–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è

üìù –ü—Ä–æ—Ü–µ—Å—Å:
1. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã (11 —à–∞–≥–æ–≤)
2. –í—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞—Ä—É—à–µ–Ω–∏–π
3. –£–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤
4. –ê–≤—Ç–æ–æ—Ü–µ–Ω–∫–∞ –ò–ò
5. –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
6. –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
7. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª–µ

‚öñÔ∏è –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –í—ã –Ω–µ—Å–µ—Ç–µ –ø–æ–ª–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

üíæ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏: –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @{ADMIN_USERNAME}
"""
    
    await message.answer(info_text, reply_markup=get_start_keyboard())

@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    """–ü–æ–∫–∞–∑ –ø–æ–º–æ—â–∏"""
    help_text = """
‚ùì –ü–æ–º–æ—â—å

üöÄ –ö–∞–∫ –Ω–∞—á–∞—Ç—å:
1. –ù–∞–∂–º–∏—Ç–µ "üìù –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É"
2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞
3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ 11 —à–∞–≥–æ–≤
4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É

üìã –ß—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å:
‚Ä¢ –§–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
‚Ä¢ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –î–∞—Ç—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
‚Ä¢ –ú–µ—Å—Ç–æ –ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤)
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (–ø–æ –∂–µ–ª–∞–Ω–∏—é)

‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –í—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏
‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ê–≤—Ç–æ–æ—Ü–µ–Ω–∫–∞ –∂–∞–ª–æ–±—ã –ò–ò
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∏
‚Ä¢ –ö–Ω–æ–ø–∫–∞ "–í–æ–∑—Ä–∞–∑–∏—Ç—å" –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è)
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –ü–æ–º–Ω–∏—Ç–µ –æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏

üîÑ –ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞
"""
    
    await message.answer(help_text, reply_markup=get_start_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_unknown(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start",
        reply_markup=get_start_keyboard()
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        bot_info = await bot.get_me()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")



